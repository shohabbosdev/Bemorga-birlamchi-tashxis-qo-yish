import json
import streamlit as st

st.set_page_config(page_title="–≠–∫—Å–ø–µ—Ä—Ç–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —Ä–∞–Ω–Ω–µ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏", page_icon="üíä", layout="wide", initial_sidebar_state="expanded")

if 'authenticated' not in st.session_state or not st.session_state.authenticated:
    st.switch_page("1_üí†_Dashboard.py")
    st.stop()
    
# Define Symptom and Illness Classes
class Symptom:
    def __init__(self, name, id_code):
        self.name = name
        self.id_code = id_code

class Illness:
    def __init__(self, name):
        self.name = name
        self.symptoms = {}
    
    def add_symptom(self, symptom, reference):
        self.symptoms[symptom.name] = reference

class Patient:
    def __init__(self, name):
        self.name = name
        self.symptoms = {}
    
    def add_symptom(self, symptom, value):
        self.symptoms[symptom] = value

class Calculation:
    def __init__(self, patient):
        self.patient = patient
        self.illnesses = []
    
    def add_illness(self, illness):
        self.illnesses.append(illness)
    
    def calculate(self):
        results = {}
        for illness in self.illnesses:
            match_count = 0
            for symptom, reference in illness.symptoms.items():
                if symptom in self.patient.symptoms:
                    patient_value = self.patient.symptoms[symptom]
                    if patient_value == reference:
                        match_count += 1
            score = (match_count / len(illness.symptoms)) * 100
            results[illness.name] = score
        return results
import sqlite3
conn = sqlite3.connect('data/userdata.db')

# Load data (familiya, ism, shariflar)
cursor = conn.execute("SELECT id, fish from USERS")


# Extract full names from JSON
patient_names = [row[1] for row in cursor]  

# UI for patient diagnosis
st.title("üí• –≠–∫—Å–ø–µ—Ä—Ç–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —Ä–∞–Ω–Ω–µ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏")

selected_name = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ü–∏–µ–Ω—Ç–∞", patient_names)
tab1, tab2, tab3, tab4, tab5 = st.tabs(["üí• –≠–∫—Å–ø–µ—Ä—Ç–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —Ä–∞–Ω–Ω–µ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏", "ü•º –ê—Ç–∞–∫–∞ –∞—Ä—Ç—Ä–∏—Ç–∞", "üß™ –¢–µ—Å—Ç—ã –Ω–∞ –†–§ –∏ –ê–¶–¶–ü","üìâ –ü–æ–∫–∞–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ê–Ω–∞–ª–∏–∑—ã", "üìÑ –ü–µ—Ä–µ–Ω–æ—Å–∏–º—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã –∏\–∏–ª–∏ –±–æ–ª–µ–∑–Ω–∏"])

with tab1:
    with st.container(border=True):
        # Patient information (select from JSON file)
        patient = Patient(selected_name)
        # Checkbox inputs for each symptom
        st.subheader("–í—ã–±–µ—Ä–∏—Ç–µ —Å–∏–º–ø—Ç–æ–º—ã –ø–∞—Ü–∏–µ–Ω—Ç–∞")
        symptoms_list = [
            Symptom("1 –ö—Ä—É–ø–Ω—ã–π —Å—É—Å—Ç–∞–≤ (–ø–æ–∫—Ä–∞—Å–Ω–µ–Ω–∏–µ)", "x1"),
            Symptom("2-10 –∫—Ä—É–ø–Ω—ã—Ö —Å—É—Å—Ç–∞–≤–æ–≤", "x2"),
            Symptom("1-3 –º–µ–ª–∫–∏—Ö —Å—É—Å—Ç–∞–≤–∞ (–±–µ–∑ —É—á–µ—Ç–∞ –∫—Ä—É–ø–Ω—ã—Ö)", "x3"),
            Symptom("4-10 –º–µ–ª–∫–∏—Ö —Å—É—Å—Ç–∞–≤–∞ (–±–µ–∑ —É—á–µ—Ç–∞ –∫—Ä—É–ø–Ω—ã—Ö)", "x4"),
            Symptom(">10 —Å—É—Å—Ç–∞–≤–æ–≤ (–∫–∞–∫ –º–∏–Ω–∏–º—É–º 1 –º–µ–ª–∫–∏–π —Å—É—Å—Ç–∞–≤)", "x5"),
            Symptom("–í–æ–≤–ª–µ—á–µ–Ω–∏–µ –ø–µ—Ä–≤–æ–≥–æ –ø–ª—é—Å–Ω–µ—Ñ–∞–ª–∞–Ω–≥–æ–≤–æ–≥–æ —Å—É—Å—Ç–∞–≤–∞", "x6"),
            Symptom("–≠–Ω—Ç–µ–∑–æ–ø–∞—Ç–∏–∏ (–±–æ–ª—å –≤ –ø—è—Ç–∫–µ, –±–æ–ª—å –≤ –ø—Ä–æ–µ–∫—Ü–∏–∏ –±–æ–ª—å—à–µ–±–µ—Ä—Ü–æ–≤–æ–≥–æ –±—É–≥—Ä–∞)", "x7"),
            Symptom("–í–æ—Å–ø–∞–ª–∏—Ç–µ–ª—å–Ω–∞—è –±–æ–ª—å –≤ –Ω–∏–∂–Ω–µ–º –æ—Ç–¥–µ–ª–µ —Å–ø–∏–Ω—ã: —Å–∞–∫—Ä–æ–∏–ª–µ–∏—Ç", "x8"),
            Symptom("–í–æ—Å–ø–∞–ª–∏—Ç–µ–ª—å–Ω–∞—è –±–æ–ª—å –≤ –Ω–∏–∂–Ω–µ–º –æ—Ç–¥–µ–ª–µ —Å–ø–∏–Ω—ã: —Å–ø–æ–Ω–¥–∏–ª–∏—Ç", "x9"),
            Symptom("–í–æ—Å–ø–∞–ª–µ–Ω–∏–µ —Å–≤—è–∑–æ–∫ –∏ —Å—É—Ö–æ–∂–∏–ª–∏–π –≤ –º–µ—Å—Ç–µ –∏—Ö –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∏—è –∫ —Å–µ–¥–∞–ª–∏—â–Ω–æ–º—É –±—É–≥—Ä—É", "x10"),
        ]

        # Checkbox for each symptom
        for symptom in symptoms_list:
            selected = st.checkbox(symptom.name)
            patient.add_symptom(symptom.name, "+" if selected else "-")

        # Define Illnesses and their reference symptoms
        illness1 = Illness("–†–µ–≤–º–∞—Ç–æ–∏–¥–Ω—ã–π –∞—Ä—Ç—Ä–∏—Ç")
        illness2 = Illness("–ü–æ–¥–∞–≥—Ä–∏—á–µ—Å–∫–∏–π –∞—Ä—Ç—Ä–∏—Ç")
        illness3 = Illness("–†–µ–∞–∫—Ç–∏–≤–Ω—ã–π –∞—Ä—Ç—Ä–∏—Ç")

        # Add symptoms to the illnesses based on reference answers
        illness1.add_symptom(symptoms_list[0], "-")
        illness1.add_symptom(symptoms_list[1], "+")
        illness1.add_symptom(symptoms_list[2], "+")
        illness1.add_symptom(symptoms_list[3], "+")
        illness1.add_symptom(symptoms_list[4], "+")
        illness1.add_symptom(symptoms_list[5], "-")
        illness1.add_symptom(symptoms_list[6], "-")
        illness1.add_symptom(symptoms_list[7], "-")
        illness1.add_symptom(symptoms_list[8], "-")
        illness1.add_symptom(symptoms_list[9], "-")

        illness2.add_symptom(symptoms_list[0], "+")
        illness2.add_symptom(symptoms_list[1], "-")
        illness2.add_symptom(symptoms_list[2], "-")
        illness2.add_symptom(symptoms_list[3], "-")
        illness2.add_symptom(symptoms_list[4], "-")
        illness2.add_symptom(symptoms_list[5], "+")
        illness2.add_symptom(symptoms_list[6], "-")
        illness2.add_symptom(symptoms_list[7], "-")
        illness2.add_symptom(symptoms_list[8], "-")
        illness2.add_symptom(symptoms_list[9], "-")

        illness3.add_symptom(symptoms_list[0], "-")
        illness3.add_symptom(symptoms_list[1], "-")
        illness3.add_symptom(symptoms_list[2], "-")
        illness3.add_symptom(symptoms_list[3], "-")
        illness3.add_symptom(symptoms_list[4], "-")
        illness3.add_symptom(symptoms_list[5], "-")
        illness3.add_symptom(symptoms_list[6], "+")
        illness3.add_symptom(symptoms_list[7], "+")
        illness3.add_symptom(symptoms_list[8], "+")
        illness3.add_symptom(symptoms_list[9], "+")

        # Perform calculation
        calc = Calculation(patient)
        calc.add_illness(illness1)
        calc.add_illness(illness2)
        calc.add_illness(illness3)
    
with tab2:
    st.header("ü•º –ê—Ç–∞–∫–∞ –∞—Ä—Ç—Ä–∏—Ç–∞")
    with st.container(border=True):
        # Patient information (select from JSON file)
        patient = Patient(selected_name)
        # Checkbox inputs for each symptom
        st.subheader("–í—ã–±–µ—Ä–∏—Ç–µ —Å–∏–º–ø—Ç–æ–º—ã –ø–∞—Ü–∏–µ–Ω—Ç–∞")
        symptoms_list = [
            Symptom("–î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã—Ö –ø—Ä–æ—è–≤–ª–µ–Ω–∏–π –∞—Ä—Ç—Ä–∏—Ç–∞ –≤–æ –≤—Ä–µ–º—è –∞—Ç–∞–∫–∏ –∑–∞ –æ–¥–∏–Ω –¥–µ–Ω—å", "x1"),
            Symptom("–û–¥–Ω–∞ –∏–ª–∏ –±–æ–ª–µ–µ –∞—Ç–∞–∫ –∞—Ä—Ç—Ä–∏—Ç–∞ –≤ –∞–Ω–∞–º–Ω–µ–∑–µ", "x2"),
            Symptom("–ü–µ—Ä–∏—Ñ–µ—Ä–∏—á–µ—Å–∫–∏–π –∞—Ä—Ç—Ä–∏—Ç (–Ω–µ—Å–∏–º–º–µ—Ç—Ä–∏—á–Ω—ã–π, –æ–ª–∏–≥–æ–∞—Ä—Ç—Ä–∏—Ç)", "x3")
        ]

        # Checkbox for each symptom
        for symptom in symptoms_list:
            selected = st.checkbox(symptom.name)
            patient.add_symptom(symptom.name, "+" if selected else "-")

        # Define Illnesses and their reference symptoms
        illness1 = Illness("–†–µ–≤–º–∞—Ç–æ–∏–¥–Ω—ã–π –∞—Ä—Ç—Ä–∏—Ç")
        illness2 = Illness("–ü–æ–¥–∞–≥—Ä–∏—á–µ—Å–∫–∏–π –∞—Ä—Ç—Ä–∏—Ç")
        illness3 = Illness("–†–µ–∞–∫—Ç–∏–≤–Ω—ã–π –∞—Ä—Ç—Ä–∏—Ç")

        # Add symptoms to the illnesses based on reference answers
        illness1.add_symptom(symptoms_list[0], "+")
        illness1.add_symptom(symptoms_list[1], "+")
        illness1.add_symptom(symptoms_list[2], "-")

        illness2.add_symptom(symptoms_list[0], "+")
        illness2.add_symptom(symptoms_list[1], "+")
        illness2.add_symptom(symptoms_list[2], "-")

        illness3.add_symptom(symptoms_list[0], "-")
        illness3.add_symptom(symptoms_list[1], "-")
        illness3.add_symptom(symptoms_list[2], "+")

        # Perform calculation
        calc = Calculation(patient)
        calc.add_illness(illness1)
        calc.add_illness(illness2)
        calc.add_illness(illness3)
        
with tab3:
    st.header("üß™ –¢–µ—Å—Ç—ã –Ω–∞ –†–§ –∏ –ê–¶–¶–ü")
    with st.container(border=True):
        # Patient information (select from JSON file)
        patient = Patient(selected_name)
        # Checkbox inputs for each symptom
        st.subheader("–í—ã–±–µ—Ä–∏—Ç–µ —Å–∏–º–ø—Ç–æ–º—ã –ø–∞—Ü–∏–µ–Ω—Ç–∞")
        symptoms_list = [
            Symptom("–û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã", "x1"),
            Symptom("–°–ª–∞–±–æ –ø–æ–∑–∏—Ç–∏–≤–Ω—ã –¥–ª—è –†–§ –∏–ª–∏ –ê–¶–¶–ü (–ø—Ä–µ–≤—ã—Å–∏–ª–∏ –≥—Ä–∞–Ω–∏—Ü—É –Ω–æ—Ä–º—ã, –Ω–æ –º–µ–Ω–µ–µ, —á–µ–º –≤ 3 —Ä–∞–∑–∞)", "x2"),
            Symptom("–í—ã—Å–æ–∫–æ –ø–æ–∑–∏—Ç–∏–≤–Ω—ã –¥–ª—è –†–§ –∏–ª–∏ –ê–¶–¶–ü (–±–æ–ª–µ–µ, —á–µ–º –≤ 3 —Ä–∞–∑–∞ –ø—Ä–µ–≤—ã—Å–∏–ª–∏ –≥—Ä–∞–Ω–∏—Ü—É –Ω–æ—Ä–º—ã)", "x3")
        ]

        # Checkbox for each symptom
        for symptom in symptoms_list:
            selected = st.checkbox(symptom.name)
            patient.add_symptom(symptom.name, "+" if selected else "-")

        # Define Illnesses and their reference symptoms
        illness1 = Illness("–†–µ–≤–º–∞—Ç–æ–∏–¥–Ω—ã–π –∞—Ä—Ç—Ä–∏—Ç")
        illness2 = Illness("–ü–æ–¥–∞–≥—Ä–∏—á–µ—Å–∫–∏–π –∞—Ä—Ç—Ä–∏—Ç")
        illness3 = Illness("–†–µ–∞–∫—Ç–∏–≤–Ω—ã–π –∞—Ä—Ç—Ä–∏—Ç")

        # Add symptoms to the illnesses based on reference answers
        illness1.add_symptom(symptoms_list[0], "-")
        illness1.add_symptom(symptoms_list[1], "+")
        illness1.add_symptom(symptoms_list[2], "+")

        illness2.add_symptom(symptoms_list[0], "-")
        illness2.add_symptom(symptoms_list[1], "-")
        illness2.add_symptom(symptoms_list[2], "-")

        illness3.add_symptom(symptoms_list[0], "-")
        illness3.add_symptom(symptoms_list[1], "-")
        illness3.add_symptom(symptoms_list[2], "-")

        # Perform calculation
        calc = Calculation(patient)
        calc.add_illness(illness1)
        calc.add_illness(illness2)
        calc.add_illness(illness3)

with tab4:
    st.header("üìâ –ü–æ–∫–∞–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ê–Ω–∞–ª–∏–∑—ã")
    with st.container(border=True):
        # Patient information (select from JSON file)
        patient = Patient(selected_name)
        # Checkbox inputs for each symptom
        st.subheader("–í—ã–±–µ—Ä–∏—Ç–µ —Å–∏–º–ø—Ç–æ–º—ã –ø–∞—Ü–∏–µ–Ω—Ç–∞")
        symptoms_list = [
            Symptom("–ù–æ—Ä–º–∞ –ø–æ –°–û–≠ ( –°–∫–æ—Ä–æ—Å—Ç—å –æ—Å–µ–¥–∞–Ω–∏—è —ç—Ä–∏—Ç—Ä–æ—Ü–∏—Ç–æ–≤) –∏ –°–†–ë (–°-—Ä–µ–∞–∫—Ç–∏–≤–Ω—ã–π –±–µ–ª–æ–∫)", "x1"),
            Symptom("–ü–æ–≤—ã—à–µ–Ω–∏–µ –°–û–≠ –∏–ª–∏ —É—Ä–æ–≤–Ω—è –°–†–ë", "x2"),
            Symptom("–ú–æ—á–µ–≤–∞—è –∫–∏—Å–ª–æ—Ç–∞ >6,0 –º–≥/–¥–ª (360 –º–∫–º–æ–ª—å/–ª)", "x3")
        ]

        # Checkbox for each symptom
        for symptom in symptoms_list:
            selected = st.checkbox(symptom.name)
            patient.add_symptom(symptom.name, "+" if selected else "-")

        # Define Illnesses and their reference symptoms
        illness1 = Illness("–†–µ–≤–º–∞—Ç–æ–∏–¥–Ω—ã–π –∞—Ä—Ç—Ä–∏—Ç")
        illness2 = Illness("–ü–æ–¥–∞–≥—Ä–∏—á–µ—Å–∫–∏–π –∞—Ä—Ç—Ä–∏—Ç")
        illness3 = Illness("–†–µ–∞–∫—Ç–∏–≤–Ω—ã–π –∞—Ä—Ç—Ä–∏—Ç")

        # Add symptoms to the illnesses based on reference answers
        illness1.add_symptom(symptoms_list[0], "-")
        illness1.add_symptom(symptoms_list[1], "+")
        illness1.add_symptom(symptoms_list[2], "-")

        illness2.add_symptom(symptoms_list[0], "-")
        illness2.add_symptom(symptoms_list[1], "-")
        illness2.add_symptom(symptoms_list[2], "+")

        illness3.add_symptom(symptoms_list[0], "-")
        illness3.add_symptom(symptoms_list[1], "-")
        illness3.add_symptom(symptoms_list[2], "-")

        # Perform calculation
        calc = Calculation(patient)
        calc.add_illness(illness1)
        calc.add_illness(illness2)
        calc.add_illness(illness3)

with tab5:
    st.header("üìÑ –ü–µ—Ä–µ–Ω–æ—Å–∏–º—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã –∏\–∏–ª–∏ –±–æ–ª–µ–∑–Ω–∏")
    with st.container(border=True):
        # Patient information (select from JSON file)
        patient = Patient(selected_name)
        # Checkbox inputs for each symptom
        st.subheader("–í—ã–±–µ—Ä–∏—Ç–µ —Å–∏–º–ø—Ç–æ–º—ã –ø–∞—Ü–∏–µ–Ω—Ç–∞")
        symptoms_list = [
            Symptom("–°–∏–Ω–æ–≤–∏—Ç< 6 –Ω–µ–¥.", "x1"),
            Symptom("–°–∏–Ω–æ–≤–∏—Ç >=6 –Ω–µ–¥.", "x2"),
            Symptom("–ì–∏–ø–µ—Ä—Ç–µ–Ω–∑–∏—è –∏/–∏–ª–∏ –æ–¥–Ω–∞ –∏–ª–∏ –±–æ–ª–µ–µ –∫–∞—Ä–¥–∏–æ–≤–∞—Å–∫—É–ª—è—Ä–Ω—ã—Ö –±–æ–ª–µ–∑–Ω–µ–π", "x3"),
            Symptom("–ö–æ–Ω—ä—é–Ω–∫—Ç–∏–≤–∏—Ç", "x4"),
            Symptom("–£—Ä–µ—Ç—Ä–∏—Ç, –ø—Ä–æ—Å—Ç–∞—Ç–∏—Ç", "x5"),
            Symptom("–≠–Ω–¥–æ—Å–∫–æ–ø–∏—á–µ—Å–∫–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ –ø–æ—Ä–∞–∂–µ–Ω–∏—è –∫–∏—à–µ—á–Ω–∏–∫–∞", "x6"),
            Symptom("–ë–ª–µ–Ω–Ω–æ—Ä–∞–≥–∏—á–µ—Å–∫–∞—è –∫–µ—Ä–∞—Ç–æ–¥–µ—Ä–º–∏—è", "x7"),
            Symptom("–≠—Ä–æ–∑–∏–≤–Ω—ã–π –∫—Ä—É–≥–æ–≤–∏–¥–Ω—ã–π –±–∞–ª–∞–Ω–∏—Ç (4‚Äì20%)", "x8"),
            Symptom("–Ø–∑–≤—ã —Å–ª–∏–∑–∏—Å—Ç–æ–π –æ–±–æ–ª–æ—á–∫–∏ –ø–æ–ª–æ—Å—Ç–∏ —Ä—Ç–∞", "x9"),
            Symptom("–ì–∏–ø–µ—Ä–∫–µ—Ä–∞—Ç–æ–∑ –Ω–æ–≥—Ç–µ–π", "x10"),
            Symptom("–ù–∞—Ä—É—à–µ–Ω–∏—è –ø—Ä–æ–≤–æ–¥–∏–º–æ—Å—Ç–∏ –ø–æ –¥–∞–Ω–Ω—ã–º –≠–ö–ì", "x11"),
            Symptom("–ú—É–∂—Å–∫–æ–π –ø–æ–ª", "x12"),
            Symptom("–ñ–µ–Ω—Å–∫–∏–π –ø–æ–ª", "x13")
        ]

        # Checkbox for each symptom
        for symptom in symptoms_list:
            selected = st.checkbox(symptom.name)
            patient.add_symptom(symptom.name, "+" if selected else "-")

        # Define Illnesses and their reference symptoms
        illness1 = Illness("–†–µ–≤–º–∞—Ç–æ–∏–¥–Ω—ã–π –∞—Ä—Ç—Ä–∏—Ç")
        illness2 = Illness("–ü–æ–¥–∞–≥—Ä–∏—á–µ—Å–∫–∏–π –∞—Ä—Ç—Ä–∏—Ç")
        illness3 = Illness("–†–µ–∞–∫—Ç–∏–≤–Ω—ã–π –∞—Ä—Ç—Ä–∏—Ç")

        # Add symptoms to the illnesses based on reference answers
        illness1.add_symptom(symptoms_list[0], "-")
        illness1.add_symptom(symptoms_list[1], "+")
        illness1.add_symptom(symptoms_list[2], "-")
        illness1.add_symptom(symptoms_list[3], "-")
        illness1.add_symptom(symptoms_list[4], "-")
        illness1.add_symptom(symptoms_list[5], "-")
        illness1.add_symptom(symptoms_list[6], "-")
        illness1.add_symptom(symptoms_list[7], "-")
        illness1.add_symptom(symptoms_list[8], "-")
        illness1.add_symptom(symptoms_list[9], "-")
        illness1.add_symptom(symptoms_list[10], "-")
        illness1.add_symptom(symptoms_list[11], "-")
        illness1.add_symptom(symptoms_list[12], "-")

        illness2.add_symptom(symptoms_list[0], "-")
        illness2.add_symptom(symptoms_list[1], "-")
        illness2.add_symptom(symptoms_list[2], "+")
        illness2.add_symptom(symptoms_list[3], "-")
        illness2.add_symptom(symptoms_list[4], "-")
        illness2.add_symptom(symptoms_list[5], "-")
        illness2.add_symptom(symptoms_list[6], "-")
        illness2.add_symptom(symptoms_list[7], "-")
        illness2.add_symptom(symptoms_list[8], "-")
        illness2.add_symptom(symptoms_list[9], "-")
        illness2.add_symptom(symptoms_list[10], "-")
        illness2.add_symptom(symptoms_list[11], "-")
        illness2.add_symptom(symptoms_list[12], "-")

        illness3.add_symptom(symptoms_list[0], "-")
        illness3.add_symptom(symptoms_list[1], "-")
        illness3.add_symptom(symptoms_list[2], "-")
        illness3.add_symptom(symptoms_list[3], "+")
        illness3.add_symptom(symptoms_list[4], "+")
        illness3.add_symptom(symptoms_list[5], "+")
        illness3.add_symptom(symptoms_list[6], "+")
        illness3.add_symptom(symptoms_list[7], "+")
        illness3.add_symptom(symptoms_list[8], "+")
        illness3.add_symptom(symptoms_list[9], "+")
        illness3.add_symptom(symptoms_list[10], "+")
        illness3.add_symptom(symptoms_list[11], "-")
        illness3.add_symptom(symptoms_list[12], "-")

        # Perform calculation
        calc = Calculation(patient)
        calc.add_illness(illness1)
        calc.add_illness(illness2)
        calc.add_illness(illness3)


import random
with st.sidebar:
    with st.container(border=True):
        if st.button("–†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç", icon="üóù"):
            results = calc.calculate()
            st.subheader("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏")
            for illness, score in results.items():
                st.metric(label=f"{illness}",value=f"{int(score)}%", delta=f"{random.randrange(-25,25)}",delta_color='normal')
            # print(results)
            import pandas as pd

            data_df = pd.DataFrame(
                {
                    "percent": list(results.values()),
                }
            )
            st.data_editor(
                    data_df,
                    column_config={
                        "percent": st.column_config.ProgressColumn(
                            "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤",
                            help="The sales volume in USD",
                            format='%f',
                            min_value=0,
                            max_value=100,
                        ),
                    },
                    hide_index=True,
                    use_container_width=True,
                    num_rows='fixed'
                )